services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - app-net

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-net

  kafdrop:
    image: obsidiandynamics/kafdrop:3.30.0
    restart: always
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKER_CONNECT: kafka:9092
    networks:
      - app-net


  postgres:
    image: debezium/postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: demo
    networks:
      - app-net

  kafka-connect:
    image: debezium/connect:2.7.3.Final
    depends_on:
      - kafka
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my-connect-configs
      OFFSET_STORAGE_TOPIC: my-connect-offsets
      STATUS_STORAGE_TOPIC: my-connect-status
    ports:
      - "8083:8083"
    networks:
      - app-net
  debezium-ui:
    image: quay.io/debezium/debezium-ui:latest
    ports:
      - "8089:8080"
    depends_on:
      - kafka-connect
    environment:
      KAFKA_CONNECT_URIS: http://kafka-connect:8083
    networks:
      - app-net

      
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - kafka-connect
      - postgres
    ports:
      - "8070:8070"
    environment:
      - ASPNETCORE_URLS=http://+:8070
    networks:
      - app-net
      
  frontend:
    build:
      context: ./frontend
    ports:
      - "5173:5173"
    networks:
      - app-net
    volumes:
      - ./frontend:/app
      - /app/node_modules
networks:
  app-net:
    driver: bridge